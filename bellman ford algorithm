// bellman ford algorithm
// dijkstra algorithm fails when it has negative weights, can do in bellman ford
// helps to detect negative cycles : can have negative edge weight
// will not work for negative weight cycle : vales will still change after n-1 iterationc
// bellman ford works for directed graph
// represent undirected in directed graph


class Solution {
public:
    // Function to implement Bellman Ford
    // edges: vector of vectors which represents the graph
    // S: source vertex to start traversing graph with
    // V: number of vertices
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        // TC : O((V - 1) * E) = O(V * E)
        // SC : O(V)
        vector<int> dist(V, 1e8);
        dist[S] = 0;
        for (int i = 0; i < V - 1; i++) {
            for (auto it : edges) {
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                if (dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                    dist[v] = dist[u] + wt;
                }
            }
        }
        // Nth relaxation to check negative cycle
        for (auto it : edges) {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if (dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                return { -1 };
            }
        }
        return dist;
    }
};
