// floyd warshall
// helps detect negative cycle
// multi-source shortest path
// if cost[i][i]<--->negative cycle exists


class Solution{
 public:
    void shortest_distance(vector<vector<int>> &matrix){
        // TC : O(n^3)
        // SC : O(n^2)
        int n=matrix.size();
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if (matrix[i][j]==-1) matrix[i][j]=1e9;
                if (i==j) matrix[i][j]=0;
            }
        }
        for(int k=0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    matrix[i][j]=min(matrix[i][j], matrix[i][k]+matrix[k][j]);
                }
            }
        }
        // for checking in negative cycle
        for(int i=0;i<n;i++){
            if (matrix[i][i]<0) cout<<"Negative Cycle";
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if (matrix[i][j]==1e9) matrix[i][j]=-1;
            }
        }
    }
};
