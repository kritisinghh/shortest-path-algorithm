class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        // TC : O(ElogV)
        // ---->n*m*4*log(n*m)
        // SC : O(n*m)
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        pq.push({0, {0, 0}});
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>> dist(n, vector<int>(m, 1e9));
        dist[0][0]=0;
        vector<pair<int, int>> dire={{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while(!pq.empty()){
            int d=pq.top().first;
            int r=pq.top().second.first;
            int c=pq.top().second.second;
            pq.pop();
            if (r==n-1 && c==m-1) return d;
            for(auto di:dire){
                int nr=r+di.first;
                int nc=c+di.second;
                if (nr>=0 && nr<n && nc>=0 && nc<m){
                    int newEffort=max(abs(heights[r][c]-heights[nr][nc]), d);
                    if (newEffort<dist[nr][nc]){
                        dist[nr][nc]=newEffort;
                        pq.push({newEffort, {nr, nc}});
                    }
                }
            }
        }
        return 0;
    }
};
