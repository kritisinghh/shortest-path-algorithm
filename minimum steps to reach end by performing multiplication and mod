/*
Given start, end and an array of n numbers. At each step, 
start is multiplied with any number in the array and then
mod operation with 100000 is done to get the new start.
Your task os to find the minimum steps in which end can be 
achieved starting from start. If it is not possible to reach 
end, then return -1.
*/

class Solution{
    int mod=100000;
public: 
    int minimumMultiplications(vector<int>& arr, int start, int end){
        // TC : O(n*100000)
        // SC : O(100000)
        if (start==end) return 0;
        queue<pair<int, int>> q;
        q.push({0, start}); // step, value
        vector<int> dist(100000, 1e9);
        dist[start]=0;
        while(!q.empty()){
            auto it=q.front();
            q.pop();
            int steps=it.first;
            int value=it.second;
            for(int i=0;i<arr.size();i++){
                int newVal=(value*arr[i])%mod;
                if (steps+1<dist[newVal]){
                    dist[newVal]=steps+1;
                    if (newVal==end) return steps+1;
                    q.push({steps+1, newVal});
                }
            }
        }
        return -1;
    }
  
};
