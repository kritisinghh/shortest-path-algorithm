class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        // TC : O(E log N)  ; E->size of times
        // SC : O(N + E)
        vector<vector<pair<int, int>>> adj(n+1);
        for(auto it:times){
            int u=it[0], v=it[1], wt=it[2];
            adj[u].push_back({wt, v}); // weight, node 
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k});
        vector<int> dist(n+1, 1e9);
        dist[k]=0;
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int delay=it.first;
            int node=it.second;
            for(auto ne:adj[node]){
                if (delay+ne.first<dist[ne.second]){
                    int d=delay+ne.first;
                    dist[ne.second]=d;
                    pq.push({d, ne.second});
                }
            }
        }
        int ans=0;
        for(int i=1;i<=n;i++){
            if (dist[i]==1e9) return -1;
            ans=max(ans, dist[i]);
        }
        return ans;
    }
};
