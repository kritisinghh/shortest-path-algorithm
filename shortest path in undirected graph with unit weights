#include <iostream>
using namespace std;

// shortest path in undirected graph with unit weights
// TC : O(V+2E)
class Solution{
    public:
        vector<int> shortestPath(vector<vector<int>>& edges, int n, int m, int src){
            vector<vector<int>> adj(n);
            for(auto it:edges){
                adj[it[0]].push_back(it[1]);
                adj[it[1]].push_back(it[0]);
            }
            vector<int> dist(n, INT_MAX);
            dist[src]=0;
            queue<int> q;
            q.push(src);
            while (!q.empty()) {
            int node = q.front();
            q.pop();

            for (auto neighbor : adj[node]) {
                if (dist[node] + 1 < dist[neighbor]) {
                    dist[neighbor] = dist[node] + 1;
                    q.push(neighbor);
                }
            }
        }
            vector<int> ans(n, -1);
            for(int i=0;i<n;i++){
                if (dist[i]!=INT_MAX) ans[i]=dist[i];
            }
            return ans;
        }
};
